buildscript {
    ext.kotlin_version = '2.1.10'

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.8.0'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Google Services
        classpath 'com.google.gms:google-services:4.4.2'

        // Secrets Gradle Plugin
        classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.1"
    }
}

/**
 * Shared configs across subprojects
 */
ext.projectArtifactId = { Project project ->
    println "Artifact ID -> project: [$project]"

    switch (project.name) {
        // Single module
        case [
                'activity',
                'chat',
                'context',
                'drawable',
                'fragment',
                'gson',
                'json',
                'kotlin',
                'locale',
                'permission',
                'recyclerview',
                'text',
                'textview',
                'view',
                'window'
        ]:
            return project.name

        // Nested module
        case [
                // animation
                'funhouse',
                'scale',

                // file
                'extension',
                'size',

                // image
                'load',
                'coil',
                'preview',

                // lifecycle
                'livedata',
                'viewmodel',

                // location
                'core',
                'compass',
                'gms',

                // material
                'tablayout',

                // multimedia
                'store',

                // popup
                'tooltip',

                // retrofit
                'download'
        ]:
            return project.parent.name + '-' + project.name
    }
    return null
}

allprojects {
    group = 'com.github.zhombie.garage'
    project.ext.version_code = 50
    version = '1.5.0'
    project.ext.artifactId = rootProject.ext.projectArtifactId(project)

    if (project.group != null) {
        if (project.ext.artifactId == null) {
            println "Group [${project.group}] is set to [${project.name}]"
        } else {
            println "Group [${project.group}] is set to [${project.name}] with id [${project.ext.artifactId}]"
        }
    }
}


/**
 * Publishing and signing info
 */
subprojects { Project project ->
    println "Subproject: ${project.name}"

    if (getSampleModuleName(project) != null) return
    if (getParentFolderModuleName(project) != null) return

    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'maven-publish'

    android {
        compileSdk 35

        defaultConfig {
            minSdk 21
            targetSdk 35

            versionCode project.ext.version_code
            versionName project.version
        }

        buildTypes {
            release {
                minifyEnabled false

                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        buildFeatures {
            buildConfig false
        }

        publishing {
            singleVariant("release") {
                withSourcesJar()
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        }

        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_17.toString()
        }

        configurations.configureEach {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.jetbrains.kotlin') {
                    details.useVersion kotlin_version
                }
            }
        }
    }

    afterEvaluate {
        android.libraryVariants.each { variant ->
            publishing.publications.create(variant.name, MavenPublication) {
                from components.findByName(variant.name)

                groupId project.group
                artifactId project.ext.artifactId
                version project.version

                pom {
                    name = project.name
                    url = 'https://github.com/zhombie/garage'

                    developers {
                        developer {
                            name = 'zhombie'
                        }
                    }
                }

//                pom.withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//                    project.configurations.api.allDependencies.each { dependency ->
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', dependency.group)
//                        dependencyNode.appendNode('artifactId', dependency.name)
//                        dependencyNode.appendNode('version', dependency.version)
//                    }
//                }
            }
        }
    }
}


static def getSampleModuleName(Project project) {
    return getModuleName(project, "sample")
}

static def getModuleName(Project project, String comparator) {
    if (project.name == comparator) {
        println "Project [${project.name}] is processed"
        return project.name
    }
    return null
}

static def getParentFolderModuleName(Project project) {
    def allProjects = project.getAllprojects()
    if (allProjects.size() > 1) {
        def name = allProjects.first().name
        println "Project [${name}] has submodules"
        return name
    }
    return null
}


tasks.register('clean', Delete) {
    delete rootProject.buildDir
}